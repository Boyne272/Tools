 SETUP
	- need to set your global configs like username and email
	- also set your core.autocrlf depending on linux or windows
	- git config --global <setting> <value> (global is for all repositories on the machine, specifics for a single repository can be done)
	- git config --list lists all current configurations

GENERAL
	- git help is a very key command (mostly use examples, can also use git <command> -h)
	- when you link repo to github it has a name, default is origin, if you link more than ne repository different names need to be used
	- all unlinked repositories are completely independent
	- forking is a GitHub trick that clones a repo under a new owning username, allowing multiple people to have their own copy of the code
	- these can then then be linked as second remote repositories as described below
	- https://github.com/<account_name>/<repository_name> is the  location of any repositories
	
COMMANDS
	- git clone : copy a repo off the web
	- git pull : update the local copy of the repo
	- git status : checks current repo status
		-uno : ignor untracked files
	- git add : stage a changed doc
	- git commit -m : store the new staged git 
	- git push : pulish to the web
	- git init : make a new local repo
	
	- git checkout -b <branch name> origin/master : create a new branch 
	- git pull origin <branch name> : update the local copy of a specific branch 
	- git remote add : link to a second repo (use a different name than 'origin')
	- git rm : remove a document that previously existed (makes the staging area just like git add)
	

COMMAND CONFUSION
	- github has 3 known code locations:
		- local on your machine
		- remote on github
		- mirror of the remote on your local
	- git fetch updates the mirror with the remote
	- git merge combies the mirror with the local and raises conflicts
	- git pull does both of these simultaneously
	- the mirror can be accessed as origin/ 
	
	- checkout allows you to move around within you git commits
	- this allows you to return to previous states and navigate branches
	- as you travel backwards you become in a detached head (head is current position in the .git history)
	- git reset allows you to remove commits with vairous options for the stage, etc
	- git revert is a new commit that undoes an old one, this allows you to undo things after you have irreversibly released them (eg. published code)
	

GITHUB FLOW
	- this is the general way people work on git
	- branches are different development paths of your code
	- master is the default strting branch
	- more branches show different paths code is going down
	- branches can be merged simularly to how you merge multiple commits, though more complex as the differences are likely larger
	- github makes "pull requests" which is asking to take a finished branch and merge it back into the one true master branch 
	- master branch is the "stable branch", others are "unstable working branches"
	- can request others to review your code before it is merged
	- mergers can't happen through conflics, help by keeping things MODULAR
	- debugging this is best done locally with the diff command
	
